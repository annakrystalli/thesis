hdat2 <- hdat[ 1:5 ]#
bks2 <- hdat[ 1:6 ]#
#
op3 <- optGammaFun( hdat2, log(bks2) )
hdat2
bks2
bks2 <- bks[ 1:6 ]
op3 <- optGammaFun( hdat2, log(bks2) )
op3
optGammaFun <- function( ds, breaks ) {#
#
	optFun <- function( pars) {#
		 shape <- pars[1]#
		 rate <-pars[2]#
		 probs <- GammaFun( ds, breaks, shape, rate)#
		 ssq <- obs/pred + log(pred)#
		 return( sum( ssq) )#
	}#
	ds <- ds / sum(ds)#
	op <- optim( c(1,1), optFun)#
	n <- length(breaks)#
	shape <- op$par[1]#
	rate <- op$par[2]#
	starts <-  breaks[1:(n-1)] #
	ends <-  breaks[ 2:n] #
	probs <- pgamma(ends, shape, rate) - pgamma(starts, shape, rate)#
	plot( (starts + ends)/2, ds, type = "h")#
	lines( (starts + ends)/2, probs, col = "red", lty = "22" )#
	x <- seq(min(breaks), max(breaks), by = (max(breaks) - min(breaks)) / 100)#
	fx <-  pgamma(x[2:length(x) ], shape, rate) - pgamma(x[1:(length(x)-1)], shape, rate)#
	plot( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, probs, type = "l" , log = "x", ylim = c(0,1))#
	points( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, ds, col= "red" )#
	mean <- shape / rate#
	var <- shape / rate^2#
	return( list(shape = shape, rate = rate, mean = mean, var = var, probs = probs, ds = ds) )#
}
hdat2 <- hdat[ 1:5 ]#
bks2 <- bks[ 1:6 ]#
#
op3 <- optGammaFun( hdat2, log(bks2) )
op3
optGammaFun <- function( ds, breaks ) {#
#
	optFun <- function( pars) {#
		 shape <- pars[1]#
		 rate <-pars[2]#
		 probs <- GammaFun( ds, breaks, shape, rate)#
		 ssq <- ds / probs + log(probs)#
		 return( -1*sum( ssq) )#
	}#
	ds <- ds / sum(ds)#
	op <- optim( c(1,1), optFun)#
	n <- length(breaks)#
	shape <- op$par[1]#
	rate <- op$par[2]#
	starts <-  breaks[1:(n-1)] #
	ends <-  breaks[ 2:n] #
	probs <- pgamma(ends, shape, rate) - pgamma(starts, shape, rate)#
	plot( (starts + ends)/2, ds, type = "h")#
	lines( (starts + ends)/2, probs, col = "red", lty = "22" )#
	x <- seq(min(breaks), max(breaks), by = (max(breaks) - min(breaks)) / 100)#
	fx <-  pgamma(x[2:length(x) ], shape, rate) - pgamma(x[1:(length(x)-1)], shape, rate)#
	plot( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, probs, type = "l" , log = "x", ylim = c(0,1))#
	points( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, ds, col= "red" )#
	mean <- shape / rate#
	var <- shape / rate^2#
	return( list(shape = shape, rate = rate, mean = mean, var = var, probs = probs, ds = ds) )#
}
op3 <- optGammaFun( hdat2, log(bks2) )
optGammaFun <- function( ds, breaks ) {#
#
	optFun <- function( pars) {#
		 shape <- pars[1]#
		 rate <-pars[2]#
		 probs <- GammaFun( ds, breaks, shape, rate)#
		 ssq <- ds / probs + log(probs)#
		 return( sum( ssq) )#
	}#
	ds <- ds / sum(ds)#
	op <- optim( c(1,1), optFun)#
	n <- length(breaks)#
	shape <- op$par[1]#
	rate <- op$par[2]#
	starts <-  breaks[1:(n-1)] #
	ends <-  breaks[ 2:n] #
	probs <- pgamma(ends, shape, rate) - pgamma(starts, shape, rate)#
	plot( (starts + ends)/2, ds, type = "h")#
	lines( (starts + ends)/2, probs, col = "red", lty = "22" )#
	x <- seq(min(breaks), max(breaks), by = (max(breaks) - min(breaks)) / 100)#
	fx <-  pgamma(x[2:length(x) ], shape, rate) - pgamma(x[1:(length(x)-1)], shape, rate)#
	plot( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, probs, type = "l" , log = "x", ylim = c(0,1))#
	points( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, ds, col= "red" )#
	mean <- shape / rate#
	var <- shape / rate^2#
	return( list(shape = shape, rate = rate, mean = mean, var = var, probs = probs, ds = ds) )#
}
op3 <- optGammaFun( hdat2, log(bks2) )
op2 <- optGammaFun( hdat, log(bks) )
optGammaFun <- function( ds, breaks ) {#
#
	optFun <- function( pars) {#
		 shape <- pars[1]#
		 rate <-pars[2]#
		 probs <- GammaFun( ds, breaks, shape, rate)#
		 ssq <- ( ds - probs )^2#
		 return( sum( ssq) )#
	}#
	ds <- ds / sum(ds)#
	op <- optim( c(1,1), optFun)#
	n <- length(breaks)#
	shape <- op$par[1]#
	rate <- op$par[2]#
	starts <-  breaks[1:(n-1)] #
	ends <-  breaks[ 2:n] #
	probs <- pgamma(ends, shape, rate) - pgamma(starts, shape, rate)#
	plot( (starts + ends)/2, ds, type = "h")#
	lines( (starts + ends)/2, probs, col = "red", lty = "22" )#
	x <- seq(min(breaks), max(breaks), by = (max(breaks) - min(breaks)) / 100)#
	fx <-  pgamma(x[2:length(x) ], shape, rate) - pgamma(x[1:(length(x)-1)], shape, rate)#
	plot( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, probs, type = "l" , log = "x", ylim = c(0,1))#
	points( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, ds, col= "red" )#
	mean <- shape / rate#
	var <- shape / rate^2#
	return( list(shape = shape, rate = rate, mean = mean, var = var, probs = probs, ds = ds) )#
}
op3 <- optGammaFun( hdat2, log(bks2) )
optGammaFun <- function( ds, breaks ) {#
#
	optFun <- function( pars) {#
		 shape <- pars[1]#
		 rate <-pars[2]#
		 probs <- GammaFun( ds, breaks, shape, rate)#
		 ssq <- ds * ( ds - probs )^2#
		 return( sum( ssq) )#
	}#
	ds <- ds / sum(ds)#
	op <- optim( c(1,1), optFun)#
	n <- length(breaks)#
	shape <- op$par[1]#
	rate <- op$par[2]#
	starts <-  breaks[1:(n-1)] #
	ends <-  breaks[ 2:n] #
	probs <- pgamma(ends, shape, rate) - pgamma(starts, shape, rate)#
	plot( (starts + ends)/2, ds, type = "h")#
	lines( (starts + ends)/2, probs, col = "red", lty = "22" )#
	x <- seq(min(breaks), max(breaks), by = (max(breaks) - min(breaks)) / 100)#
	fx <-  pgamma(x[2:length(x) ], shape, rate) - pgamma(x[1:(length(x)-1)], shape, rate)#
	plot( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, probs, type = "l" , log = "x", ylim = c(0,1))#
	points( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, ds, col= "red" )#
	mean <- shape / rate#
	var <- shape / rate^2#
	return( list(shape = shape, rate = rate, mean = mean, var = var, probs = probs, ds = ds) )#
}
op3 <- optGammaFun( hdat2, log(bks2) )
op3
op2
optGammaFun <- function( ds, breaks ) {#
#
	optFun <- function( pars) {#
		 shape <- pars[1]#
		 rate <-pars[2]#
		 probs <- GammaFun( ds, breaks, shape, rate)#
		 ssq <- 1  / ds ( ds - probs )^2#
		 return( sum( ssq) )#
	}#
	ds <- ds / sum(ds)#
	op <- optim( c(1,1), optFun)#
	n <- length(breaks)#
	shape <- op$par[1]#
	rate <- op$par[2]#
	starts <-  breaks[1:(n-1)] #
	ends <-  breaks[ 2:n] #
	probs <- pgamma(ends, shape, rate) - pgamma(starts, shape, rate)#
	plot( (starts + ends)/2, ds, type = "h")#
	lines( (starts + ends)/2, probs, col = "red", lty = "22" )#
	x <- seq(min(breaks), max(breaks), by = (max(breaks) - min(breaks)) / 100)#
	fx <-  pgamma(x[2:length(x) ], shape, rate) - pgamma(x[1:(length(x)-1)], shape, rate)#
	plot( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, probs, type = "l" , log = "x", ylim = c(0,1))#
	points( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, ds, col= "red" )#
	mean <- shape / rate#
	var <- shape / rate^2#
	return( list(shape = shape, rate = rate, mean = mean, var = var, probs = probs, ds = ds) )#
}
op3 <- optGammaFun( hdat2, log(bks2) )
optGammaFun <- function( ds, breaks ) {#
#
	optFun <- function( pars) {#
		 shape <- pars[1]#
		 rate <-pars[2]#
		 probs <- GammaFun( ds, breaks, shape, rate)#
		 ssq <- 1  / ds * ( ds - probs )^2#
		 return( sum( ssq) )#
	}#
	ds <- ds / sum(ds)#
	op <- optim( c(1,1), optFun)#
	n <- length(breaks)#
	shape <- op$par[1]#
	rate <- op$par[2]#
	starts <-  breaks[1:(n-1)] #
	ends <-  breaks[ 2:n] #
	probs <- pgamma(ends, shape, rate) - pgamma(starts, shape, rate)#
	plot( (starts + ends)/2, ds, type = "h")#
	lines( (starts + ends)/2, probs, col = "red", lty = "22" )#
	x <- seq(min(breaks), max(breaks), by = (max(breaks) - min(breaks)) / 100)#
	fx <-  pgamma(x[2:length(x) ], shape, rate) - pgamma(x[1:(length(x)-1)], shape, rate)#
	plot( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, probs, type = "l" , log = "x", ylim = c(0,1))#
	points( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, ds, col= "red" )#
	mean <- shape / rate#
	var <- shape / rate^2#
	return( list(shape = shape, rate = rate, mean = mean, var = var, probs = probs, ds = ds) )#
}
op3 <- optGammaFun( hdat2, log(bks2) )
op3
op2
optGammaFun <- function( ds, breaks ) {#
#
	optFun <- function( pars) {#
		 shape <- pars[1]#
		 rate <-pars[2]#
		 probs <- GammaFun( ds, breaks, shape, rate)#
		 ssq <-  probs * ( ds - probs )^2#
		 return( sum( ssq) )#
	}#
	ds <- ds / sum(ds)#
	op <- optim( c(1,1), optFun)#
	n <- length(breaks)#
	shape <- op$par[1]#
	rate <- op$par[2]#
	starts <-  breaks[1:(n-1)] #
	ends <-  breaks[ 2:n] #
	probs <- pgamma(ends, shape, rate) - pgamma(starts, shape, rate)#
	plot( (starts + ends)/2, ds, type = "h")#
	lines( (starts + ends)/2, probs, col = "red", lty = "22" )#
	x <- seq(min(breaks), max(breaks), by = (max(breaks) - min(breaks)) / 100)#
	fx <-  pgamma(x[2:length(x) ], shape, rate) - pgamma(x[1:(length(x)-1)], shape, rate)#
	plot( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, probs, type = "l" , log = "x", ylim = c(0,1))#
	points( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, ds, col= "red" )#
	mean <- shape / rate#
	var <- shape / rate^2#
	return( list(shape = shape, rate = rate, mean = mean, var = var, probs = probs, ds = ds) )#
}
op3 <- optGammaFun( hdat2, log(bks2) )
op3
op3 <- optGammaFun( hdat, log(bks) )
op3
op3$probs * sum( hdat )
op3$ds * sum( hdat )
optGammaFun <- function( ds, breaks ) {#
#
	optFun <- function( pars) {#
		 shape <- pars[1]#
		 rate <-pars[2]#
		 probs <- GammaFun( ds, breaks, shape, rate)#
		 ssq <-  ( ds - probs )^2 / probs#
		 return( sum( ssq) )#
	}#
	ds <- ds / sum(ds)#
	op <- optim( c(1,1), optFun)#
	n <- length(breaks)#
	shape <- op$par[1]#
	rate <- op$par[2]#
	starts <-  breaks[1:(n-1)] #
	ends <-  breaks[ 2:n] #
	probs <- pgamma(ends, shape, rate) - pgamma(starts, shape, rate)#
	plot( (starts + ends)/2, ds, type = "h")#
	lines( (starts + ends)/2, probs, col = "red", lty = "22" )#
	x <- seq(min(breaks), max(breaks), by = (max(breaks) - min(breaks)) / 100)#
	fx <-  pgamma(x[2:length(x) ], shape, rate) - pgamma(x[1:(length(x)-1)], shape, rate)#
	plot( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, probs, type = "l" , log = "x", ylim = c(0,1))#
	points( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, ds, col= "red" )#
	mean <- shape / rate#
	var <- shape / rate^2#
	return( list(shape = shape, rate = rate, mean = mean, var = var, probs = probs, ds = ds) )#
}
op3 <- optGammaFun( hdat2, log(bks2) )
op3$ds * sum( hdat )
op3 <- optGammaFun( hdat, log(bks) )#
#
op3$ds * sum( hdat )
op3$probs * sum( hdat )
summary(dat)
optlnormFun <- function( ds, breaks ) {#
#
	optFun <- function( pars) {#
		 shape <- pars[1]#
		 rate <-pars[2]#
		 probs <- lnormFun( ds, breaks, shape, rate)#
		 ssq <- ( ds - probs )^2#
		 return( sum( ssq) )#
	}#
	ds <- ds / sum(ds)#
	op <- optim( c(1,1), optFun)#
	n <- length(breaks)#
	shape <- op$par[1]#
	rate <- op$par[2]#
	starts <-  breaks[1:(n-1)] #
	ends <-  breaks[ 2:n] #
	probs <- plnorm(ends, shape, rate) - plnorm(starts, shape, rate)#
	plot( (starts + ends)/2, ds, type = "h")#
	lines( (starts + ends)/2, probs, col = "red", lty = "22" )#
	x <- seq(min(breaks), max(breaks), by = (max(breaks) - min(breaks)) / 100)#
	fx <-  plnorm(x[2:length(x) ], shape, rate) - plnorm(x[1:(length(x)-1)], shape, rate)#
	plot( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, probs, type = "l" , log = "x", ylim = c(0,1))#
	points( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, ds, col= "red" )#
	mean <- shape / rate#
	var <- shape / rate^2#
	return( list(shape = shape, rate = rate, mean = mean, var = var, probs = probs, ds = ds) )#
}
optlnormFun( hdat, bks)
op3 <- optlnormFun( hdat, bks)#
op3$ds * sum( hdat )#
op3$probs * sum( hdat )
op3$ds * sum( hdat )#
round( op3$probs * sum( hdat ) )
optlnormFun <- function( ds, breaks ) {#
#
	optFun <- function( pars) {#
		 shape <- pars[1]#
		 rate <-pars[2]#
		 probs <- lnormFun( ds, breaks, shape, rate)#
		 ssq <- ds * ( ds - probs )^2#
		 return( sum( ssq) )#
	}#
	ds <- ds / sum(ds)#
	op <- optim( c(1,1), optFun)#
	n <- length(breaks)#
	shape <- op$par[1]#
	rate <- op$par[2]#
	starts <-  breaks[1:(n-1)] #
	ends <-  breaks[ 2:n] #
	probs <- plnorm(ends, shape, rate) - plnorm(starts, shape, rate)#
	plot( (starts + ends)/2, ds, type = "h")#
	lines( (starts + ends)/2, probs, col = "red", lty = "22" )#
	x <- seq(min(breaks), max(breaks), by = (max(breaks) - min(breaks)) / 100)#
	fx <-  plnorm(x[2:length(x) ], shape, rate) - plnorm(x[1:(length(x)-1)], shape, rate)#
	plot( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, probs, type = "l" , log = "x", ylim = c(0,1))#
	points( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, ds, col= "red" )#
	mean <- shape / rate#
	var <- shape / rate^2#
	return( list(shape = shape, rate = rate, mean = mean, var = var, probs = probs, ds = ds) )#
}
optlnormFun( hdat, bks)
op3$ds * sum( hdat )#
round( op3$probs * sum( hdat ) )
optlnormFun <- function( ds, breaks ) {#
#
	optFun <- function( pars) {#
		 shape <- pars[1]#
		 rate <-pars[2]#
		 probs <- lnormFun( ds, breaks, shape, rate)#
		 ssq <- 1/ds * ( ds - probs )^2#
		 return( sum( ssq) )#
	}#
	ds <- ds / sum(ds)#
	op <- optim( c(1,1), optFun)#
	n <- length(breaks)#
	shape <- op$par[1]#
	rate <- op$par[2]#
	starts <-  breaks[1:(n-1)] #
	ends <-  breaks[ 2:n] #
	probs <- plnorm(ends, shape, rate) - plnorm(starts, shape, rate)#
	plot( (starts + ends)/2, ds, type = "h")#
	lines( (starts + ends)/2, probs, col = "red", lty = "22" )#
	x <- seq(min(breaks), max(breaks), by = (max(breaks) - min(breaks)) / 100)#
	fx <-  plnorm(x[2:length(x) ], shape, rate) - plnorm(x[1:(length(x)-1)], shape, rate)#
	plot( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, probs, type = "l" , log = "x", ylim = c(0,1))#
	points( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, ds, col= "red" )#
	mean <- shape / rate#
	var <- shape / rate^2#
	return( list(shape = shape, rate = rate, mean = mean, var = var, probs = probs, ds = ds) )#
}
optlnormFun( hdat, bks)
optlnormFun <- function( ds, breaks ) {#
#
	optFun <- function( pars) {#
		 shape <- pars[1]#
		 rate <-pars[2]#
		 probs <- lnormFun( ds, breaks, shape, rate)#
		 ssq <- 1/prob * ( ds - probs )^2#
		 return( sum( ssq) )#
	}#
	ds <- ds / sum(ds)#
	op <- optim( c(1,1), optFun)#
	n <- length(breaks)#
	shape <- op$par[1]#
	rate <- op$par[2]#
	starts <-  breaks[1:(n-1)] #
	ends <-  breaks[ 2:n] #
	probs <- plnorm(ends, shape, rate) - plnorm(starts, shape, rate)#
	plot( (starts + ends)/2, ds, type = "h")#
	lines( (starts + ends)/2, probs, col = "red", lty = "22" )#
	x <- seq(min(breaks), max(breaks), by = (max(breaks) - min(breaks)) / 100)#
	fx <-  plnorm(x[2:length(x) ], shape, rate) - plnorm(x[1:(length(x)-1)], shape, rate)#
	plot( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, probs, type = "l" , log = "x", ylim = c(0,1))#
	points( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, ds, col= "red" )#
	mean <- shape / rate#
	var <- shape / rate^2#
	return( list(shape = shape, rate = rate, mean = mean, var = var, probs = probs, ds = ds) )#
}
optlnormFun( hdat, bks)
optlnormFun <- function( ds, breaks ) {#
#
	optFun <- function( pars) {#
		 shape <- pars[1]#
		 rate <-pars[2]#
		 probs <- lnormFun( ds, breaks, shape, rate)#
		 ssq <- 1/probs * ( ds - probs )^2#
		 return( sum( ssq) )#
	}#
	ds <- ds / sum(ds)#
	op <- optim( c(1,1), optFun)#
	n <- length(breaks)#
	shape <- op$par[1]#
	rate <- op$par[2]#
	starts <-  breaks[1:(n-1)] #
	ends <-  breaks[ 2:n] #
	probs <- plnorm(ends, shape, rate) - plnorm(starts, shape, rate)#
	plot( (starts + ends)/2, ds, type = "h")#
	lines( (starts + ends)/2, probs, col = "red", lty = "22" )#
	x <- seq(min(breaks), max(breaks), by = (max(breaks) - min(breaks)) / 100)#
	fx <-  plnorm(x[2:length(x) ], shape, rate) - plnorm(x[1:(length(x)-1)], shape, rate)#
	plot( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, probs, type = "l" , log = "x", ylim = c(0,1))#
	points( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, ds, col= "red" )#
	mean <- shape / rate#
	var <- shape / rate^2#
	return( list(shape = shape, rate = rate, mean = mean, var = var, probs = probs, ds = ds) )#
}
optlnormFun( hdat, bks)
op3 <- optlnormFun( hdat, bks)#
op3$ds * sum( hdat )#
round( op3$probs * sum( hdat ) )
optlnormFun <- function( ds, breaks ) {#
#
	optFun <- function( pars) {#
		 shape <- pars[1]#
		 rate <-pars[2]#
		 probs <- lnormFun( ds, breaks, shape, rate)#
		 ssq <- 1/(probs^2) * ( ds - probs )^2#
		 return( sum( ssq) )#
	}#
	ds <- ds / sum(ds)#
	op <- optim( c(1,1), optFun)#
	n <- length(breaks)#
	shape <- op$par[1]#
	rate <- op$par[2]#
	starts <-  breaks[1:(n-1)] #
	ends <-  breaks[ 2:n] #
	probs <- plnorm(ends, shape, rate) - plnorm(starts, shape, rate)#
	plot( (starts + ends)/2, ds, type = "h")#
	lines( (starts + ends)/2, probs, col = "red", lty = "22" )#
	x <- seq(min(breaks), max(breaks), by = (max(breaks) - min(breaks)) / 100)#
	fx <-  plnorm(x[2:length(x) ], shape, rate) - plnorm(x[1:(length(x)-1)], shape, rate)#
	plot( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, probs, type = "l" , log = "x", ylim = c(0,1))#
	points( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, ds, col= "red" )#
	mean <- shape / rate#
	var <- shape / rate^2#
	return( list(shape = shape, rate = rate, mean = mean, var = var, probs = probs, ds = ds) )#
}
op3 <- optlnormFun( hdat, bks)#
op3$ds * sum( hdat )#
round( op3$probs * sum( hdat ) )
optlnormFun <- function( ds, breaks ) {#
#
	optFun <- function( pars) {#
		 shape <- pars[1]#
		 rate <-pars[2]#
		 probs <- lnormFun( ds, breaks, shape, rate)#
		 ssq <- (probs^2) * ( ds - probs )^2#
		 return( sum( ssq) )#
	}#
	ds <- ds / sum(ds)#
	op <- optim( c(1,1), optFun)#
	n <- length(breaks)#
	shape <- op$par[1]#
	rate <- op$par[2]#
	starts <-  breaks[1:(n-1)] #
	ends <-  breaks[ 2:n] #
	probs <- plnorm(ends, shape, rate) - plnorm(starts, shape, rate)#
	plot( (starts + ends)/2, ds, type = "h")#
	lines( (starts + ends)/2, probs, col = "red", lty = "22" )#
	x <- seq(min(breaks), max(breaks), by = (max(breaks) - min(breaks)) / 100)#
	fx <-  plnorm(x[2:length(x) ], shape, rate) - plnorm(x[1:(length(x)-1)], shape, rate)#
	plot( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, probs, type = "l" , log = "x", ylim = c(0,1))#
	points( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, ds, col= "red" )#
	mean <- shape / rate#
	var <- shape / rate^2#
	return( list(shape = shape, rate = rate, mean = mean, var = var, probs = probs, ds = ds) )#
}
op3 <- optlnormFun( hdat, bks)#
op3$ds * sum( hdat )#
round( op3$probs * sum( hdat ) )
op3
optlnormFun <- function( ds, breaks ) {#
#
	optFun <- function( pars) {#
		 shape <- pars[1]#
		 rate <-pars[2]#
		 probs <- lnormFun( ds, breaks, shape, rate)#
		 ssq <- (probs^2) * ( ds - probs )^2#
		 return( sum( ssq) )#
	}#
	ds <- ds / sum(ds)#
	op <- optim( c(1,1), optFun)#
	n <- length(breaks)#
	shape <- op$par[1]#
	rate <- op$par[2]#
	starts <-  breaks[1:(n-1)] #
	ends <-  breaks[ 2:n] #
	probs <- plnorm(ends, shape, rate) - plnorm(starts, shape, rate)#
	plot( (starts + ends)/2, ds, type = "h")#
	lines( (starts + ends)/2, probs, col = "red", lty = "22" )#
	x <- seq(min(breaks), max(breaks), by = (max(breaks) - min(breaks)) / 100)#
	fx <-  plnorm(x[2:length(x) ], shape, rate) - plnorm(x[1:(length(x)-1)], shape, rate)#
	plot( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, probs, type = "l" , log = "x", ylim = c(0,1))#
	points( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, ds, col= "red" )#
	mean <- exp( shape + 0.5 * var )#
	var <- ( exp(var) - 1 ) * exp( 2 * mean + var )#
	return( list(shape = shape, rate = rate, mean = mean, var = var, probs = probs, ds = ds) )#
}
op3 <- optlnormFun( hdat, bks)#
op3$ds * sum( hdat )#
round( op3$probs * sum( hdat ) )
optlnormFun <- function( ds, breaks ) {#
#
	optFun <- function( pars) {#
		 shape <- pars[1]#
		 rate <-pars[2]#
		 probs <- lnormFun( ds, breaks, shape, rate)#
		 ssq <- (probs^2) * ( ds - probs )^2#
		 return( sum( ssq) )#
	}#
	ds <- ds / sum(ds)#
	op <- optim( c(1,1), optFun)#
	n <- length(breaks)#
	shape <- op$par[1]#
	rate <- op$par[2]#
	starts <-  breaks[1:(n-1)] #
	ends <-  breaks[ 2:n] #
	probs <- plnorm(ends, shape, rate) - plnorm(starts, shape, rate)#
	plot( (starts + ends)/2, ds, type = "h")#
	lines( (starts + ends)/2, probs, col = "red", lty = "22" )#
	x <- seq(min(breaks), max(breaks), by = (max(breaks) - min(breaks)) / 100)#
	fx <-  plnorm(x[2:length(x) ], shape, rate) - plnorm(x[1:(length(x)-1)], shape, rate)#
	plot( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, probs, type = "l" , log = "x", ylim = c(0,1))#
	points( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, ds, col= "red" )#
	mean <- exp( shape + 0.5 * var )#
	var <- ( exp( rate ) - 1 ) * exp( 2 * mean + rate )#
	return( list(shape = shape, rate = rate, mean = mean, var = var, probs = probs, ds = ds) )#
}
op3 <- optlnormFun( hdat, bks)#
op3$ds * sum( hdat )#
round( op3$probs * sum( hdat ) )
optlnormFun <- function( ds, breaks ) {#
#
	optFun <- function( pars) {#
		 shape <- pars[1]#
		 rate <-pars[2]#
		 probs <- lnormFun( ds, breaks, shape, rate)#
		 ssq <- (probs^2) * ( ds - probs )^2#
		 return( sum( ssq) )#
	}#
	ds <- ds / sum(ds)#
	op <- optim( c(1,1), optFun)#
	n <- length(breaks)#
	shape <- op$par[1]#
	rate <- op$par[2]#
	starts <-  breaks[1:(n-1)] #
	ends <-  breaks[ 2:n] #
	probs <- plnorm(ends, shape, rate) - plnorm(starts, shape, rate)#
	plot( (starts + ends)/2, ds, type = "h")#
	lines( (starts + ends)/2, probs, col = "red", lty = "22" )#
	x <- seq(min(breaks), max(breaks), by = (max(breaks) - min(breaks)) / 100)#
	fx <-  plnorm(x[2:length(x) ], shape, rate) - plnorm(x[1:(length(x)-1)], shape, rate)#
	plot( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, probs, type = "l" , log = "x", ylim = c(0,1))#
	points( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, ds, col= "red" )#
	mean <- exp( shape + 0.5 * rate )#
	var <- ( exp( rate ) - 1 ) * exp( 2 * mean + rate )#
	return( list(shape = shape, rate = rate, mean = mean, var = var, probs = probs, ds = ds) )#
}
op3 <- optlnormFun( hdat, bks)#
op3$ds * sum( hdat )#
round( op3$probs * sum( hdat ) )
op3
recDat
sumDat <- table( factor( dat$state, levels = c(1:12) ) )
sumDat
sumDat * acc
sum(sumDat * acc )
sumDat <- table( factor( dat$state, levels = c(1:12) ) )#
sumDat <- sumDat * sum( sumDat)#
sum(sumDat * acc )
sumDat <- sumDat * sum( sumDat)
sumDat <- table( factor( dat$state, levels = c(1:12) ) )#
sumDat <- sumDat / sum( sumDat)#
sum(sumDat * acc )
rawVar <- sum( (sumDat * acc - rawMean)^2)
sumDat <- table( factor( dat$state, levels = c(1:12) ) )#
sumDat <- sumDat / sum( sumDat)#
rawMean <- sum(sumDat * acc )#
rawVar <- sum( (sumDat * acc - rawMean)^2)
rawMean
rawVar
rawVar <- sum( sumDat*( acc - rawMean)^2)
rawVar
op3
optlnormFun <- function( ds, breaks ) {#
#
	optFun <- function( pars) {#
		 shape <- pars[1]#
		 rate <-pars[2]#
		 probs <- lnormFun( ds, breaks, shape, rate)#
		 ssq <- (probs^2) * ( ds - probs )^2#
		 return( sum( ssq) )#
	}#
	ds <- ds / sum(ds)#
	op <- optim( c(1,1), optFun)#
	n <- length(breaks)#
	shape <- op$par[1]#
	rate <- op$par[2]#
	starts <-  breaks[1:(n-1)] #
	ends <-  breaks[ 2:n] #
	probs <- plnorm(ends, shape, rate) - plnorm(starts, shape, rate)#
	plot( (starts + ends)/2, ds, type = "h")#
	lines( (starts + ends)/2, probs, col = "red", lty = "22" )#
	x <- seq(min(breaks), max(breaks), by = (max(breaks) - min(breaks)) / 100)#
	fx <-  plnorm(x[2:length(x) ], shape, rate) - plnorm(x[1:(length(x)-1)], shape, rate)#
	plot( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, probs, type = "l" , log = "x", ylim = c(0,1))#
	points( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, ds, col= "red" )#
	mean <- exp( shape + 0.5 * rate )#
	var <- ( exp( rate ) - 1 ) * exp( 2 * shape + rate )#
	return( list(shape = shape, rate = rate, mean = mean, var = var, probs = probs, ds = ds) )#
}
op3 <- optlnormFun( hdat, bks)#
op3$ds * sum( hdat )#
round( op3$probs * sum( hdat ) )#
#
sumDat <- table( factor( dat$state, levels = c(1:12) ) )#
sumDat <- sumDat / sum( sumDat)#
rawMean <- sum(sumDat * acc )#
rawVar <- sum( sumDat*( acc - rawMean)^2)
op3
rawMean
rawVar
optlnormFun <- function( ds, breaks ) {#
#
	optFun <- function( pars) {#
		 shape <- pars[1]#
		 rate <-pars[2]#
		 probs <- lnormFun( ds, breaks, shape, rate)#
		 ssq <- 1/(probs^2) * ( ds - probs )^2#
		 return( sum( ssq) )#
	}#
	ds <- ds / sum(ds)#
	op <- optim( c(1,1), optFun)#
	n <- length(breaks)#
	shape <- op$par[1]#
	rate <- op$par[2]#
	starts <-  breaks[1:(n-1)] #
	ends <-  breaks[ 2:n] #
	probs <- plnorm(ends, shape, rate) - plnorm(starts, shape, rate)#
	plot( (starts + ends)/2, ds, type = "h")#
	lines( (starts + ends)/2, probs, col = "red", lty = "22" )#
	x <- seq(min(breaks), max(breaks), by = (max(breaks) - min(breaks)) / 100)#
	fx <-  plnorm(x[2:length(x) ], shape, rate) - plnorm(x[1:(length(x)-1)], shape, rate)#
	plot( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, probs, type = "l" , log = "x", ylim = c(0,1))#
	points( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, ds, col= "red" )#
	mean <- exp( shape + 0.5 * rate )#
	var <- ( exp( rate ) - 1 ) * exp( 2 * shape + rate )#
	return( list(shape = shape, rate = rate, mean = mean, var = var, probs = probs, ds = ds) )#
}
op3 <- optlnormFun( hdat, bks)#
op3$ds * sum( hdat )#
round( op3$probs * sum( hdat ) )#
#
sumDat <- table( factor( dat$state, levels = c(1:12) ) )#
sumDat <- sumDat / sum( sumDat)#
rawMean <- sum(sumDat * acc )#
rawVar <- sum( sumDat*( acc - rawMean)^2)
op3
optlnormFun <- function( ds, breaks ) {#
#
	optFun <- function( pars) {#
		 shape <- pars[1]#
		 rate <-pars[2]#
		 probs <- lnormFun( ds, breaks, shape, rate)#
		 ssq <- 1 / probs * ( ds - probs )^2#
		 return( sum( ssq) )#
	}#
	ds <- ds / sum(ds)#
	op <- optim( c(1,1), optFun)#
	n <- length(breaks)#
	shape <- op$par[1]#
	rate <- op$par[2]#
	starts <-  breaks[1:(n-1)] #
	ends <-  breaks[ 2:n] #
	probs <- plnorm(ends, shape, rate) - plnorm(starts, shape, rate)#
	plot( (starts + ends)/2, ds, type = "h")#
	lines( (starts + ends)/2, probs, col = "red", lty = "22" )#
	x <- seq(min(breaks), max(breaks), by = (max(breaks) - min(breaks)) / 100)#
	fx <-  plnorm(x[2:length(x) ], shape, rate) - plnorm(x[1:(length(x)-1)], shape, rate)#
	plot( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, probs, type = "l" , log = "x", ylim = c(0,1))#
	points( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, ds, col= "red" )#
	mean <- exp( shape + 0.5 * rate )#
	var <- ( exp( rate ) - 1 ) * exp( 2 * shape + rate )#
	return( list(shape = shape, rate = rate, mean = mean, var = var, probs = probs, ds = ds) )#
}
op3 <- optlnormFun( hdat, bks)#
op3$ds * sum( hdat )#
round( op3$probs * sum( hdat ) )#
#
sumDat <- table( factor( dat$state, levels = c(1:12) ) )#
sumDat <- sumDat / sum( sumDat)#
rawMean <- sum(sumDat * acc )#
rawVar <- sum( sumDat*( acc - rawMean)^2)
op3
rawMean
rawVar
acc2 <- exp( ( log(mn)+log(mx) )/2)
acc2
acc1
acc
op3 <- optlnormFun( hdat, bks)#
op3$ds * sum( hdat )#
round( op3$probs * sum( hdat ) )#
#
sumDat <- table( factor( dat$state, levels = c(1:12) ) )#
sumDat <- sumDat / sum( sumDat)#
rawMean <- sum(sumDat * acc2 )#
rawVar <- sum( sumDat*( acc2 - rawMean)^2)
rawMean
rawVar
op3
optlnormFun <- function( ds, breaks ) {#
#
	optFun <- function( pars) {#
		 shape <- pars[1]#
		 rate <-pars[2]#
		 probs <- lnormFun( ds, breaks, shape, rate)#
		 ssq <-  ( ds - probs )^2#
		 return( sum( ssq) )#
	}#
	ds <- ds / sum(ds)#
	op <- optim( c(1,1), optFun)#
	n <- length(breaks)#
	shape <- op$par[1]#
	rate <- op$par[2]#
	starts <-  breaks[1:(n-1)] #
	ends <-  breaks[ 2:n] #
	probs <- plnorm(ends, shape, rate) - plnorm(starts, shape, rate)#
	plot( (starts + ends)/2, ds, type = "h")#
	lines( (starts + ends)/2, probs, col = "red", lty = "22" )#
	x <- seq(min(breaks), max(breaks), by = (max(breaks) - min(breaks)) / 100)#
	fx <-  plnorm(x[2:length(x) ], shape, rate) - plnorm(x[1:(length(x)-1)], shape, rate)#
	plot( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, probs, type = "l" , log = "x", ylim = c(0,1))#
	points( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, ds, col= "red" )#
	mean <- exp( shape + 0.5 * rate )#
	var <- ( exp( rate ) - 1 ) * exp( 2 * shape + rate )#
	return( list(shape = shape, rate = rate, mean = mean, var = var, probs = probs, ds = ds) )#
}
op3 <- optlnormFun( hdat, bks)#
op3$ds * sum( hdat )#
round( op3$probs * sum( hdat ) )#
#
sumDat <- table( factor( dat$state, levels = c(1:12) ) )#
sumDat <- sumDat / sum( sumDat)#
rawMean <- sum(sumDat * acc2 )#
rawVar <- sum( sumDat*( acc2 - rawMean)^2)
op3
op2 <- optGammaFun( hdat, log(bks) )
op2
op1 <-  optGammaFun( hdat, bks)
op3 <- optlnormFun( hdat, bks)#
op3$ds * sum( hdat )#
round( op3$probs * sum( hdat ) )#
#
sumDat <- table( factor( dat$state, levels = c(1:12) ) )#
sumDat <- sumDat / sum( sumDat)#
rawMean <- sum(sumDat * acc2 )#
rawVar <- sum( sumDat*( acc2 - rawMean)^2)
op3
rawMean
rawVar
rawGMean <- sum(sumDat * log(acc2) )#
rawGVar <- sum( sumDat*( log(acc2) - rawMean)^2)
rawGmean
rawGMean
rawGVar
rawGVar <- sum( sumDat*( log(acc2) - rawGMean)^2)
rawGVar
rm( list = ls() )#
library( car )#
#
robhist <- function( x, breaks) {		#
		xmin <- min(x)#
		xmax <- max(x)#
		step <- (xmax - xmin) / breaks #
		intervals <- seq(xmin, xmax, by = step)#
		countfun <- function( i ) length( intersect( which( x > intervals[i]), which( x < intervals[i+1] ) ) )#
		dx <- sapply( c(1: (length( intervals) - 1) ), countfun)#
		return( list( counts = dx, breaks = intervals) )	#
	}#
lnormFun <- function( ds, breaks, shape, rate ) {#
		ds <- ds / sum(ds)#
		n <- length(breaks)#
		starts <- breaks[1:(n-1)] #
		ends <-  breaks[ 2:n]  #
		probs <- plnorm( ends, shape, rate) - plnorm( starts, shape, rate )#
#
		return( probs)#
	}#
optlnormFun <- function( ds, breaks ) {#
#
	optFun <- function( pars) {#
		 shape <- pars[1]#
		 rate <-pars[2]#
		 probs <- lnormFun( ds, breaks, shape, rate)#
		 ssq <-  ( ds - probs )^2#
		 return( sum( ssq) )#
	}#
	ds <- ds / sum(ds)#
	op <- optim( c(1,1), optFun)#
	n <- length(breaks)#
	shape <- op$par[1]#
	rate <- op$par[2]#
	starts <-  breaks[1:(n-1)] #
	ends <-  breaks[ 2:n] #
	probs <- plnorm(ends, shape, rate) - plnorm(starts, shape, rate)#
	plot( (starts + ends)/2, ds, type = "h")#
	lines( (starts + ends)/2, probs, col = "red", lty = "22" )#
	x <- seq(min(breaks), max(breaks), by = (max(breaks) - min(breaks)) / 100)#
	fx <-  plnorm(x[2:length(x) ], shape, rate) - plnorm(x[1:(length(x)-1)], shape, rate)#
	plot( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, probs, type = "l" , log = "x", ylim = c(0,1))#
	points( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, ds, col= "red" )#
	mean <- exp( shape + 0.5 * rate )#
	var <- ( exp( rate ) - 1 ) * exp( 2 * shape + rate )#
	return( list(shape = shape, rate = rate, mean = mean, var = var, probs = probs, ds = ds) )#
}#
GammaFun <- function( ds, breaks, shape, rate ) {#
		ds <- ds / sum(ds)#
		n <- length(breaks)#
		starts <- breaks[1:(n-1)] #
		ends <-  breaks[ 2:n]  #
		probs <- pgamma(ends, shape, rate) - pgamma(starts, shape, rate)#
		return( probs)#
	}#
optGammaFun <- function( ds, breaks ) {#
#
	optFun <- function( pars) {#
		 shape <- pars[1]#
		 rate <-pars[2]#
		 probs <- GammaFun( ds, breaks, shape, rate)#
		 ssq <-  ( ds - probs )^2 / probs#
		 return( sum( ssq) )#
	}#
	ds <- ds / sum(ds)#
	op <- optim( c(1,1), optFun)#
	n <- length(breaks)#
	shape <- op$par[1]#
	rate <- op$par[2]#
	starts <-  breaks[1:(n-1)] #
	ends <-  breaks[ 2:n] #
	probs <- pgamma(ends, shape, rate) - pgamma(starts, shape, rate)#
	plot( (starts + ends)/2, ds, type = "h")#
	lines( (starts + ends)/2, probs, col = "red", lty = "22" )#
	x <- seq(min(breaks), max(breaks), by = (max(breaks) - min(breaks)) / 100)#
	fx <-  pgamma(x[2:length(x) ], shape, rate) - pgamma(x[1:(length(x)-1)], shape, rate)#
	plot( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, probs, type = "l" , log = "x", ylim = c(0,1))#
	points( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, ds, col= "red" )#
	mean <- shape / rate#
	var <- shape / rate^2#
	return( list(shape = shape, rate = rate, mean = mean, var = var, probs = probs, ds = ds) )#
}#
cats <- c(1:12)#
acc <- c( 1, 2, 3, 6, 17, 35, 75, 160, 310, 640, 1300, 2690 )#
ab <- c( 50, 100, 150, 300, 850, 1750, 3750, 8000, 15500, 32000, 65000, 134500)#
#
mn <- c( 1, 2, 3, 4, 12, 26, 51, 126, 251, 501, 1001, 2001)#
mx <- c( 1, 2, 3, 11, 25, 50, 125, 250, 500, 1000, 2000, 4000)#
#
acc2 <- exp( ( log(mn)+log(mx) )/2)#
#
plot( cats, acc, log = "y")#
plot( cats, ab, log = "y")#
#
plot( acc, ab, log  = "xy")#
#
plot( (mn + mx) / 2 , acc, log = "xy")#
abline(0,1)#
#
dat1 <- read.csv( "states.csv")#
dat2 <- read.csv( "raw.csv")
hist(dat1)
hist(dat1$state)
quartz()
hist( dat2$state)
head(dat2)
hist( dat2$y)
dim(dat2)
colnames( dat2 ) <- "state"
dat <- dat2#
#
recDat <- recode( dat$state, "c(1,2,3 ) = 1")#
recDat <- recode( recDat, " 4 = 2")#
recDat <- recode( recDat, " 5 = 3")#
recDat <- recode( recDat, " 6 = 4")#
recDat <- recode( recDat, " 7 = 5")#
recDat <- recode( recDat, " 8 = 6")#
recDat <- recode( recDat, " 9 = 7")#
recDat <- recode( recDat, " 10 = 8")#
recDat <- recode( recDat, " 11 = 9")#
recDat <- recode( recDat, " 12 = 10")#
rmn <- c( 1, 4, 12, 26, 51, 126, 251, 501, 1001, 2001 )#
rmx <- c(  3, 11, 25, 50, 125, 250, 500, 1000, 2000, 4000 )#
bks <- c( 1, 4, 12, 26, 51, 126, 251, 501, 1001, 2001 , 4000 )#
#
hist( (mn[recDat] + mx[recDat] ) / 2 )#
#
hdat <- table( factor( recDat, levels = c(1:10) ))#
#
logGammaFun( hdat, bks, 1,1)#
op1 <-  optGammaFun( hdat, bks)#
op2 <- optGammaFun( hdat, log(bks) )#
#
obs <- hdat#
pred <- sum(hdat) * op2$probs#
#
cbind(obs, round( pred))#
op3 <- optlnormFun( hdat, bks)#
op3$ds * sum( hdat )#
round( op3$probs * sum( hdat ) )#
#
sumDat <- table( factor( dat$state, levels = c(1:12) ) )#
sumDat <- sumDat / sum( sumDat)#
rawMean <- sum(sumDat * acc2 )#
rawVar <- sum( sumDat*( acc2 - rawMean)^2)#
#
rawGMean <- sum(sumDat * log(acc2) )#
rawGVar <- sum( sumDat*( log(acc2) - rawGMean)^2)
op2 <- optGammaFun( hdat, log(bks) )
op2
rawGmean
op1 <-  optGammaFun( hdat, bks)
op3 <- optlnormFun( hdat, bks)
op3
rawGMean <- sum(sumDat * log(acc2) )#
rawGVar <- sum( sumDat*( log(acc2) - rawGMean)^2)
rawGmean
rawGMean
rawMean
rawVar
rm( list = ls() )#
library( car )#
#
robhist <- function( x, breaks) {		#
		xmin <- min(x)#
		xmax <- max(x)#
		step <- (xmax - xmin) / breaks #
		intervals <- seq(xmin, xmax, by = step)#
		countfun <- function( i ) length( intersect( which( x > intervals[i]), which( x < intervals[i+1] ) ) )#
		dx <- sapply( c(1: (length( intervals) - 1) ), countfun)#
		return( list( counts = dx, breaks = intervals) )	#
	}#
lnormFun <- function( ds, breaks, shape, rate ) {#
		ds <- ds / sum(ds)#
		n <- length(breaks)#
		starts <- breaks[1:(n-1)] #
		ends <-  breaks[ 2:n]  #
		probs <- plnorm( ends, shape, rate) - plnorm( starts, shape, rate )#
#
		return( probs)#
	}#
optlnormFun <- function( ds, breaks ) {#
#
	optFun <- function( pars) {#
		 shape <- pars[1]#
		 rate <-pars[2]#
		 probs <- lnormFun( ds, breaks, shape, rate)#
		 ssq <-  ( ds - probs )^2#
		 return( sum( ssq) )#
	}#
	ds <- ds / sum(ds)#
	op <- optim( c(1,1), optFun)#
	n <- length(breaks)#
	shape <- op$par[1]#
	rate <- op$par[2]#
	starts <-  breaks[1:(n-1)] #
	ends <-  breaks[ 2:n] #
	probs <- plnorm(ends, shape, rate) - plnorm(starts, shape, rate)#
	plot( (starts + ends)/2, ds, type = "h")#
	lines( (starts + ends)/2, probs, col = "red", lty = "22" )#
	x <- seq(min(breaks), max(breaks), by = (max(breaks) - min(breaks)) / 100)#
	fx <-  plnorm(x[2:length(x) ], shape, rate) - plnorm(x[1:(length(x)-1)], shape, rate)#
	plot( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, probs, type = "l" , log = "x", ylim = c(0,1))#
	points( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, ds, col= "red" )#
	mean <- exp( shape + 0.5 * rate )#
	var <- ( exp( rate ) - 1 ) * exp( 2 * shape + rate )#
	return( list(shape = shape, rate = rate, mean = mean, var = var, probs = probs, ds = ds) )#
}#
GammaFun <- function( ds, breaks, shape, rate ) {#
		ds <- ds / sum(ds)#
		n <- length(breaks)#
		starts <- breaks[1:(n-1)] #
		ends <-  breaks[ 2:n]  #
		probs <- pgamma(ends, shape, rate) - pgamma(starts, shape, rate)#
		return( probs)#
	}#
optGammaFun <- function( ds, breaks ) {#
#
	optFun <- function( pars) {#
		 shape <- pars[1]#
		 rate <-pars[2]#
		 probs <- GammaFun( ds, breaks, shape, rate)#
		 ssq <-  ( ds - probs )^2 / probs#
		 return( sum( ssq) )#
	}#
	ds <- ds / sum(ds)#
	op <- optim( c(1,1), optFun)#
	n <- length(breaks)#
	shape <- op$par[1]#
	rate <- op$par[2]#
	starts <-  breaks[1:(n-1)] #
	ends <-  breaks[ 2:n] #
	probs <- pgamma(ends, shape, rate) - pgamma(starts, shape, rate)#
	plot( (starts + ends)/2, ds, type = "h")#
	lines( (starts + ends)/2, probs, col = "red", lty = "22" )#
	x <- seq(min(breaks), max(breaks), by = (max(breaks) - min(breaks)) / 100)#
	fx <-  pgamma(x[2:length(x) ], shape, rate) - pgamma(x[1:(length(x)-1)], shape, rate)#
	plot( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, probs, type = "l" , log = "x", ylim = c(0,1))#
	points( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, ds, col= "red" )#
	mean <- shape / rate#
	var <- shape / rate^2#
	return( list(shape = shape, rate = rate, mean = mean, var = var, probs = probs, ds = ds) )#
}
recodeDat <- function( dat ) {#
	colnames( dat ) <- "state"#
	recDat <- recode( dat$state, "c(1,2,3 ) = 1")#
	recDat <- recode( recDat, " 4 = 2")#
	recDat <- recode( recDat, " 5 = 3")#
	recDat <- recode( recDat, " 6 = 4")#
	recDat <- recode( recDat, " 7 = 5")#
	recDat <- recode( recDat, " 8 = 6")#
	recDat <- recode( recDat, " 9 = 7")#
	recDat <- recode( recDat, " 10 = 8")#
	recDat <- recode( recDat, " 11 = 9")#
	recDat <- recode( recDat, " 12 = 10")#
	return( recDat )#
	}
dat1 <- read.csv( "states.csv")#
dat2 <- read.csv( "raw.csv")#
rdat1 <- recodeDat( dat1 )#
rdat2 <- recodeDat( dat2 )
hist(rdat1)
hist(dat1)
hist(dat1[,1])
head( dat1)
head( dat1$state)
hist(dat1[,2])
hist(dat2[,2])
hist(dat2)
head( dat2)
head( dat2$y)
hist(dat2$y
)
hist(dat1[,2])
hist(dat2$y
)
hist( dat1, freq = TRUE)
hist( dat1$state, freq = TRUE)
hist( dat1$state, freq = FALSE)
hist( dat2$y, freq = FALSE)
layout( matrix( c(1,2), ncol  =1) )#
hist( dat1$state, freq = FALSE)#
hist( dat2$y, freq = FALSE)
rdat1
recodeDat <- function( x ) {#
	recDat <- recode( x, "c(1,2,3 ) = 1")#
	recDat <- recode( recDat, " 4 = 2")#
	recDat <- recode( recDat, " 5 = 3")#
	recDat <- recode( recDat, " 6 = 4")#
	recDat <- recode( recDat, " 7 = 5")#
	recDat <- recode( recDat, " 8 = 6")#
	recDat <- recode( recDat, " 9 = 7")#
	recDat <- recode( recDat, " 10 = 8")#
	recDat <- recode( recDat, " 11 = 9")#
	recDat <- recode( recDat, " 12 = 10")#
	return( recDat )#
	}
dat1 <- read.csv( "states.csv")#
dat2 <- read.csv( "raw.csv")#
#
layout( matrix( c(1,2), ncol  =1) )#
hist( dat1$state, freq = FALSE)#
hist( dat2$y, freq = FALSE)#
#
rdat1 <- recodeDat( dat1$state )#
rdat2 <- recodeDat( dat2$y )
rdat1
hist(rdat1)
hist(rdat2)
layout( matrix( c(1,2), ncol  =1) )#
hist( rdat1, freq = FALSE)#
hist( rdat2, freq = FALSE)
hist( rdat1, freq = FALSE, breaks = seq(1:12))
hist( rdat2, freq = FALSE, breaks = seq(1:12))
summary(rdat)
table(rdat1)
table(rdat1) / length(rdat1)
table(rdat2) / length(rdat2)
hist( rdat1, freq = FALSE, breaks = seq(1:12), log = "y")
layout( matrix( c(1,2), ncol  =1) )#
hist( rdat1, freq = FALSE, breaks = seq(1:12))#
hist( rdat2, freq = FALSE, breaks = seq(1:12))
recodeDat2 <- function( x ) {#
	recDat <- recode( x, "c(1, 2, 3, 4  ) = 1")#
	recDat <- recode( recDat, " 5 = 2")#
	recDat <- recode( recDat, " 6 = 3")#
	recDat <- recode( recDat, " 7 = 4")#
	recDat <- recode( recDat, " 8 = 5")#
	recDat <- recode( recDat, " 9 = 6")#
	recDat <- recode( recDat, " 10 = 7")#
	recDat <- recode( recDat, " 11 = 8")#
	recDat <- recode( recDat, " 12 = 9")#
	return( recDat )#
	}
rdat1 <- recodeDat2( dat1$state )#
rdat2 <- recodeDat2( dat2$y )#
#
layout( matrix( c(1,2), ncol  =1) )#
hist( rdat1, freq = FALSE, breaks = seq(1:12))#
hist( rdat2, freq = FALSE, breaks = seq(1:12))
table(rdat1) / length(rdat1)
table(rdat2) / length(rdat2)
op1 <-  optGammaFun( hdat1, bks1)
dat1 <- read.csv( "states.csv")#
dat2 <- read.csv( "raw.csv")#
#
layout( matrix( c(1,2), ncol  =1) )#
hist( dat1$state, freq = FALSE)#
hist( dat2$y, freq = FALSE)#
#
rdat1 <- recodeDat2( dat1$state )#
rdat2 <- recodeDat2( dat2$y )#
#
layout( matrix( c(1,2), ncol  =1) )#
hist( rdat1, freq = FALSE, breaks = seq(1:12))#
hist( rdat2, freq = FALSE, breaks = seq(1:12))#
rmn1 <- c( 1, 4, 12, 26, 51, 126, 251, 501, 1001, 2001 )#
rmx1 <- c(  3, 11, 25, 50, 125, 250, 500, 1000, 2000, 4000 )#
bks1 <- c( 1, 4, 12, 26, 51, 126, 251, 501, 1001, 2001 , 4000 )#
#
hist( (mn[recDat] + mx[recDat] ) / 2 )#
#
hdat1 <- table( factor( rDat1, levels = c(1:10) ))#
#
op1 <-  optGammaFun( hdat1, bks1)
cats <- c(1:12)#
acc <- c( 1, 2, 3, 6, 17, 35, 75, 160, 310, 640, 1300, 2690 )#
ab <- c( 50, 100, 150, 300, 850, 1750, 3750, 8000, 15500, 32000, 65000, 134500)#
#
mn <- c( 1, 2, 3, 4, 12, 26, 51, 126, 251, 501, 1001, 2001)#
mx <- c( 1, 2, 3, 11, 25, 50, 125, 250, 500, 1000, 2000, 4000)#
#
rmn1 <- c( 1, 4, 12, 26, 51, 126, 251, 501, 1001, 2001 )#
rmx1 <- c(  3, 11, 25, 50, 125, 250, 500, 1000, 2000, 4000 )#
bks1 <- c( 1, 4, 12, 26, 51, 126, 251, 501, 1001, 2001 , 4000 )#
dat1 <- read.csv( "states.csv")#
dat2 <- read.csv( "raw.csv")#
#
layout( matrix( c(1,2), ncol  =1) )#
hist( dat1$state, freq = FALSE)#
hist( dat2$y, freq = FALSE)#
#
rdat1 <- recodeDat2( dat1$state )#
rdat2 <- recodeDat2( dat2$y )#
#
layout( matrix( c(1,2), ncol  =1) )#
hist( rdat1, freq = FALSE, breaks = seq(1:12))#
hist( rdat2, freq = FALSE, breaks = seq(1:12))#
rmn1 <- c( 1, 4, 12, 26, 51, 126, 251, 501, 1001, 2001 )#
rmx1 <- c(  3, 11, 25, 50, 125, 250, 500, 1000, 2000, 4000 )#
bks1 <- c( 1, 4, 12, 26, 51, 126, 251, 501, 1001, 2001 , 4000 )#
#
hist( (mn[recDat] + mx[recDat] ) / 2 )#
#
hdat1 <- table( factor( rDat1, levels = c(1:10) ))#
#
op1 <-  optGammaFun( hdat1, bks1)
dat1 <- read.csv( "states.csv")#
dat2 <- read.csv( "raw.csv")#
#
layout( matrix( c(1,2), ncol  =1) )#
hist( dat1$state, freq = FALSE)#
hist( dat2$y, freq = FALSE)#
#
rdat1 <- recodeDat2( dat1$state )#
rdat2 <- recodeDat2( dat2$y )#
#
layout( matrix( c(1,2), ncol  =1) )#
hist( rdat1, freq = FALSE, breaks = seq(1:12))#
hist( rdat2, freq = FALSE, breaks = seq(1:12))#
rmn1 <- c( 1, 4, 12, 26, 51, 126, 251, 501, 1001, 2001 )#
rmx1 <- c(  3, 11, 25, 50, 125, 250, 500, 1000, 2000, 4000 )#
bks1 <- c( 1, 4, 12, 26, 51, 126, 251, 501, 1001, 2001 , 4000 )#
hdat1 <- table( factor( rdat1, levels = c(1:10) ))#
#
op1 <-  optGammaFun( hdat1, bks1)
op2 <- optGammaFun( hdat, log(bks) )
op2 <- optGammaFun( hdat1, log(bks1) )
op2
op2 <- optGammaFun( hdat1, log(bks1) )
cbind(obs, round( pred))
obs <- hdat1#
pred <- sum(hdat) * op2$probs
obs <- hdat1#
pred <- sum(hdat1) * op2$probs
plot(obs, pred)
obs
pred
plot( c(obs), c(pred))
dat1 <- read.csv( "states.csv")#
dat2 <- read.csv( "raw.csv")#
#
layout( matrix( c(1,2), ncol  =1) )#
hist( dat1$state, freq = FALSE)#
hist( dat2$y, freq = FALSE)#
#
rdat1 <- recodeDat2( dat1$state )#
rdat2 <- recodeDat2( dat2$y )#
#
layout( matrix( c(1,2), ncol  =1) )#
hist( rdat1, freq = FALSE, breaks = seq(1:12))#
hist( rdat2, freq = FALSE, breaks = seq(1:12))#
rmn1 <- c( 1, 4, 12, 26, 51, 126, 251, 501, 1001, 2001 )#
rmx1 <- c(  3, 11, 25, 50, 125, 250, 500, 1000, 2000, 4000 )#
bks1 <- c( 1, 4, 12, 26, 51, 126, 251, 501, 1001, 2001 , 4000 )#
bks2 <- c( 1, 12, 26, 51, 126, 251, 501, 1001, 2001 , 4000 )#
#
hdat1 <- table( factor( rdat1, levels = c(1:10) ))#
op1 <- optGammaFun( hdat1, log(bks1) )#
#
obs1 <- hdat1#
pred1 <- sum(hdat1) * op1$probs#
op2 <- optGammaFun( hdat2, log(bks2) )#
#
obs1 <- hdat#
pred1 <- sum(hdat2) * op2$probs
hdat2 <- table( factor( rdat1, levels = c(1:10) ))
op1 <- optGammaFun( hdat1, log(bks1) )#
#
obs1 <- hdat1#
pred1 <- sum(hdat1) * op1$probs#
op2 <- optGammaFun( hdat2, log(bks2) )#
#
obs1 <- hdat#
pred1 <- sum(hdat2) * op2$probs
hdat2
dim( bks2)
length( bks2)
length( bks1)
hdat2 <- table( factor( rdat1, levels = c(1:9) ))
op2 <- optGammaFun( hdat2, log(bks2) )
op2
op1
sumDat <- table( factor( dat$state, levels = c(1:12) ) )#
sumDat <- sumDat / sum( sumDat)#
rawMean <- sum(sumDat * acc )#
rawVar <- sum( sumDat*( acc - rawMean)^2)#
#
rawGMean <- sum(sumDat * log(acc2) )#
rawGVar <- sum( sumDat*( log(acc2) - rawGMean)^2)
sumDat <- table( factor( dat2$state, levels = c(1:12) ) )#
sumDat <- sumDat / sum( sumDat)#
rawMean <- sum(sumDat * acc )#
rawVar <- sum( sumDat*( acc - rawMean)^2)#
#
rawGMean <- sum(sumDat * log(acc2) )#
rawGVar <- sum( sumDat*( log(acc2) - rawGMean)^2)
sumDat <- table( factor( dat2$state, levels = c(1:12) ) )#
sumDat <- sumDat / sum( sumDat)#
rawMean <- sum(sumDat * acc )#
rawVar <- sum( sumDat*( acc - rawMean)^2)#
#
rawGMean <- sum(sumDat * log(acc) )#
rawGVar <- sum( sumDat*( log(acc) - rawGMean)^2)
rawGmean
rawGMean
sumDat
sumDat <- table( factor( dat2$y, levels = c(1:12) ) )
sumDat <- sumDat / sum( sumDat)
rawMean <- sum(sumDat * acc )
rawVar <- sum( sumDat*( acc - rawMean)^2)
rawGMean <- sum(sumDat * log(acc) )
rawGVar <- sum( sumDat*( log(acc) - rawGMean)^2)
rawGmean
rawGMean
op2
rawGVar
op1
op2
hdat1
hdat2
hdat2 <- table( factor( rdat2, levels = c(1:9) ))
hdat2
op1 <- optGammaFun( hdat1, log(bks1) )#
#
obs1 <- hdat1#
pred1 <- sum(hdat1) * op1$probs#
op2 <- optGammaFun( hdat2, log(bks2) )#
#
obs1 <- hdat#
pred1 <- sum(hdat2) * op2$probs
op1 <- optGammaFun( hdat1, log(bks1) )#
#
obs1 <- hdat1#
pred1 <- sum(hdat1) * op1$probs#
op2 <- optGammaFun( hdat2, log(bks2) )#
#
obs1 <- hdat2#
pred1 <- sum(hdat2) * op2$probs
op1
op2
op1 <- optGammaFun( hdat1, log(bks1) )
rm( list = ls() )#
library( car )#
#
robhist <- function( x, breaks) {		#
		xmin <- min(x)#
		xmax <- max(x)#
		step <- (xmax - xmin) / breaks #
		intervals <- seq(xmin, xmax, by = step)#
		countfun <- function( i ) length( intersect( which( x > intervals[i]), which( x < intervals[i+1] ) ) )#
		dx <- sapply( c(1: (length( intervals) - 1) ), countfun)#
		return( list( counts = dx, breaks = intervals) )	#
	}#
lnormFun <- function( ds, breaks, shape, rate ) {#
		ds <- ds / sum(ds)#
		n <- length(breaks)#
		starts <- breaks[1:(n-1)] #
		ends <-  breaks[ 2:n]  #
		probs <- plnorm( ends, shape, rate) - plnorm( starts, shape, rate )#
#
		return( probs)#
	}#
optlnormFun <- function( ds, breaks ) {#
#
	optFun <- function( pars) {#
		 shape <- pars[1]#
		 rate <-pars[2]#
		 probs <- lnormFun( ds, breaks, shape, rate)#
		 ssq <-  ( ds - probs )^2#
		 return( sum( ssq) )#
	}#
	ds <- ds / sum(ds)#
	op <- optim( c(1,1), optFun)#
	n <- length(breaks)#
	shape <- op$par[1]#
	rate <- op$par[2]#
	starts <-  breaks[1:(n-1)] #
	ends <-  breaks[ 2:n] #
	probs <- plnorm(ends, shape, rate) - plnorm(starts, shape, rate)#
	plot( (starts + ends)/2, ds, type = "h")#
	lines( (starts + ends)/2, probs, col = "red", lty = "22" )#
	x <- seq(min(breaks), max(breaks), by = (max(breaks) - min(breaks)) / 100)#
	fx <-  plnorm(x[2:length(x) ], shape, rate) - plnorm(x[1:(length(x)-1)], shape, rate)#
	plot( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, probs, type = "l" , log = "x", ylim = c(0,1))#
	points( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, ds, col= "red" )#
	mean <- exp( shape + 0.5 * rate )#
	var <- ( exp( rate ) - 1 ) * exp( 2 * shape + rate )#
	return( list(shape = shape, rate = rate, mean = mean, var = var, probs = probs, ds = ds) )#
}#
GammaFun <- function( ds, breaks, shape, rate ) {#
		ds <- ds / sum(ds)#
		n <- length(breaks)#
		starts <- breaks[1:(n-1)] #
		ends <-  breaks[ 2:n]  #
		probs <- pgamma(ends, shape, rate) - pgamma(starts, shape, rate)#
		return( probs)#
	}#
optGammaFun <- function( ds, breaks ) {#
#
	optFun <- function( pars) {#
		 shape <- pars[1]#
		 rate <-pars[2]#
		 probs <- GammaFun( ds, breaks, shape, rate)#
		 ssq <-  ( ds - probs )^2 / probs#
		 return( sum( ssq) )#
	}#
	ds <- ds / sum(ds)#
	op <- optim( c(1,1), optFun)#
	n <- length(breaks)#
	shape <- op$par[1]#
	rate <- op$par[2]#
	starts <-  breaks[1:(n-1)] #
	ends <-  breaks[ 2:n] #
	probs <- pgamma(ends, shape, rate) - pgamma(starts, shape, rate)#
	plot( (starts + ends)/2, ds, type = "h")#
	lines( (starts + ends)/2, probs, col = "red", lty = "22" )#
	x <- seq(min(breaks), max(breaks), by = (max(breaks) - min(breaks)) / 100)#
	fx <-  pgamma(x[2:length(x) ], shape, rate) - pgamma(x[1:(length(x)-1)], shape, rate)#
	plot( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, probs, type = "l" , log = "x", ylim = c(0,1))#
	points( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, ds, col= "red" )#
	mean <- shape / rate#
	var <- shape / rate^2#
	return( list(shape = shape, rate = rate, mean = mean, var = var, probs = probs, ds = ds) )#
}#
#
recodeDat1 <- function( x ) {#
	recDat <- recode( x, "c(1,2,3  ) = 1")#
	recDat <- recode( recDat, " 4 = 2")#
	recDat <- recode( recDat, " 5 = 3")#
	recDat <- recode( recDat, " 6 = 4")#
	recDat <- recode( recDat, " 7 = 5")#
	recDat <- recode( recDat, " 8 = 6")#
	recDat <- recode( recDat, " 9 = 7")#
	recDat <- recode( recDat, " 10 = 8")#
	recDat <- recode( recDat, " 11 = 9")#
	recDat <- recode( recDat, " 12 = 10")#
	return( recDat )#
	}#
#
recodeDat2 <- function( x ) {#
	recDat <- recode( x, "c(1, 2, 3, 4  ) = 1")#
	recDat <- recode( recDat, " 5 = 2")#
	recDat <- recode( recDat, " 6 = 3")#
	recDat <- recode( recDat, " 7 = 4")#
	recDat <- recode( recDat, " 8 = 5")#
	recDat <- recode( recDat, " 9 = 6")#
	recDat <- recode( recDat, " 10 = 7")#
	recDat <- recode( recDat, " 11 = 8")#
	recDat <- recode( recDat, " 12 = 9")#
	return( recDat )#
	}#
cats <- c(1:12)#
acc <- c( 1, 2, 3, 6, 17, 35, 75, 160, 310, 640, 1300, 2690 )#
ab <- c( 50, 100, 150, 300, 850, 1750, 3750, 8000, 15500, 32000, 65000, 134500)#
#
mn <- c( 1, 2, 3, 4, 12, 26, 51, 126, 251, 501, 1001, 2001)#
mx <- c( 1, 2, 3, 11, 25, 50, 125, 250, 500, 1000, 2000, 4000)#
#
rmn1 <- c( 1, 4, 12, 26, 51, 126, 251, 501, 1001, 2001 )#
rmx1 <- c(  3, 11, 25, 50, 125, 250, 500, 1000, 2000, 4000 )#
bks1 <- c( 1, 4, 12, 26, 51, 126, 251, 501, 1001, 2001 , 4000 )#
dat1 <- read.csv( "states.csv")#
dat2 <- read.csv( "raw.csv")#
#
layout( matrix( c(1,2), ncol  =1) )#
hist( dat1$state, freq = FALSE)#
hist( dat2$y, freq = FALSE)#
#
rdat1 <- recodeDat2( dat1$state )#
rdat2 <- recodeDat2( dat2$y )#
#
layout( matrix( c(1,2), ncol  =1) )#
hist( rdat1, freq = FALSE, breaks = seq(1:12))#
hist( rdat2, freq = FALSE, breaks = seq(1:12))#
rmn1 <- c( 1, 4, 12, 26, 51, 126, 251, 501, 1001, 2001 )#
rmx1 <- c(  3, 11, 25, 50, 125, 250, 500, 1000, 2000, 4000 )#
bks1 <- c( 1, 4, 12, 26, 51, 126, 251, 501, 1001, 2001 , 4000 )#
bks2 <- c( 1, 12, 26, 51, 126, 251, 501, 1001, 2001 , 4000 )#
#
hdat1 <- table( factor( rdat1, levels = c(1:10) ))#
hdat2 <- table( factor( rdat2, levels = c(1:9) ))#
#
op1 <- optGammaFun( hdat1, log(bks1) )#
#
obs1 <- hdat1#
pred1 <- sum(hdat1) * op1$probs#
op2 <- optGammaFun( hdat2, log(bks2) )#
#
obs1 <- hdat2#
pred1 <- sum(hdat2) * op2$probs#
sumDat <- table( factor( dat2$y, levels = c(1:12) ) )#
sumDat <- sumDat / sum( sumDat)#
rawMean <- sum(sumDat * acc )#
rawVar <- sum( sumDat*( acc - rawMean)^2)#
#
rawGMean <- sum(sumDat * log(acc) )#
rawGVar <- sum( sumDat*( log(acc) - rawGMean)^2)
op1]
op1
op2
rawMean
rawVar
rawGmean
rawGMean
rawGVar
sumDat
op1 <- optGammaFun( hdat1, log(bks1) )
optlnormFun(hdat1, log(bks1))
optlnormFun(hdat1, bks1)
rm( list = ls() )#
library( car )#
robhist <- function( x, breaks) {		#
		xmin <- min(x)#
		xmax <- max(x)#
		step <- (xmax - xmin) / breaks #
		intervals <- seq(xmin, xmax, by = step)#
		countfun <- function( i ) length( intersect( which( x > intervals[i]), which( x < intervals[i+1] ) ) )#
		dx <- sapply( c(1: (length( intervals) - 1) ), countfun)#
		return( list( counts = dx, breaks = intervals) )	#
	}#
lnormFun <- function( breaks, lmean, lvar ) {#
		n <- length(breaks)	#
		starts <- breaks[1:(n-1)] #
		ends <-  breaks[ 2:n]  #
		probs <- plnorm( ends, lmean, lvar) - plnorm( starts, lmean, lvar )#
		return( probs)#
	}#
optlnormFun <- function( ds, breaks ) {#
#
	optFun <- function( pars) {#
		 lmean <- pars[1]#
		 lvar <-pars[2]#
		 probs <- lnormFun( breaks, lmean, lvar )#
		 ssq <-  ( ds - probs )^2#
		 return( sum( ssq) )#
	}#
	ds <- ds / sum(ds)#
	op <- optim( c(1,1), optFun)#
	n <- length(breaks)#
	lmean <- op$par[1]#
	lvar <- op$par[2]#
	starts <-  breaks[1:(n-1)] #
	ends <-  breaks[ 2:n] #
	probs <- plnorm(ends, lmean, lvar) - plnorm(starts, lmean, lvar)#
	plot( (starts + ends)/2, ds, type = "h")#
	lines( (starts + ends)/2, probs, col = "red", lty = "22" )#
	x <- seq(min(breaks), max(breaks), by = (max(breaks) - min(breaks)) / 100)#
	fx <-  plnorm(x[2:length(x) ], lmean, lvar) - plnorm(x[1:(length(x)-1)], lmean, lvar)#
	plot( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, probs, type = "l" , log = "x", ylim = c(0,1))#
	points( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, ds, col= "red" )#
	mean <- exp( lmean + 0.5 * lvar )#
	var <- ( exp( lvar ) - 1 ) * exp( 2 * shape + lvar )#
	return( list(shape = shape, lvar = lvar, mean = mean, var = var, probs = probs, ds = ds) )	#
}#
GammaFun <- function( ds, breaks, shape, rate ) {#
		ds <- ds / sum(ds)#
		n <- length(breaks)#
		starts <- breaks[1:(n-1)] #
		ends <-  breaks[ 2:n]  #
		probs <- pgamma(ends, shape, rate) - pgamma(starts, shape, rate)#
		return( probs)#
	}#
optGammaFun <- function( ds, breaks ) {#
#
	optFun <- function( pars) {#
		 shape <- pars[1]#
		 rate <-pars[2]#
		 probs <- GammaFun( ds, breaks, shape, rate)#
		 ssq <-  ( ds - probs )^2 / probs#
		 return( sum( ssq) )#
	}#
	ds <- ds / sum(ds)#
	op <- optim( c(1,1), optFun)#
	n <- length(breaks)#
	shape <- op$par[1]#
	rate <- op$par[2]#
	starts <-  breaks[1:(n-1)] #
	ends <-  breaks[ 2:n] #
	probs <- pgamma(ends, shape, rate) - pgamma(starts, shape, rate)#
	plot( (starts + ends)/2, ds, type = "h")#
	lines( (starts + ends)/2, probs, col = "red", lty = "22" )#
	x <- seq(min(breaks), max(breaks), by = (max(breaks) - min(breaks)) / 100)#
	fx <-  pgamma(x[2:length(x) ], shape, rate) - pgamma(x[1:(length(x)-1)], shape, rate)#
	plot( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, probs, type = "l" , log = "x", ylim = c(0,1))#
	points( ( breaks[1:(length(breaks)-1) ]  + breaks[ 2:length(breaks)  ] ) / 2, ds, col= "red" )#
	mean <- shape / rate#
	var <- shape / rate^2#
	return( list(shape = shape, rate = rate, mean = mean, var = var, probs = probs, ds = ds) )#
}#
#
recodeDat1 <- function( x ) {#
	recDat <- recode( x, "c(1,2,3  ) = 1")#
	recDat <- recode( recDat, " 4 = 2")#
	recDat <- recode( recDat, " 5 = 3")#
	recDat <- recode( recDat, " 6 = 4")#
	recDat <- recode( recDat, " 7 = 5")#
	recDat <- recode( recDat, " 8 = 6")#
	recDat <- recode( recDat, " 9 = 7")#
	recDat <- recode( recDat, " 10 = 8")#
	recDat <- recode( recDat, " 11 = 9")#
	recDat <- recode( recDat, " 12 = 10")#
	return( recDat )#
	}#
#
recodeDat2 <- function( x ) {#
	recDat <- recode( x, "c(1, 2, 3, 4  ) = 1")#
	recDat <- recode( recDat, " 5 = 2")#
	recDat <- recode( recDat, " 6 = 3")#
	recDat <- recode( recDat, " 7 = 4")#
	recDat <- recode( recDat, " 8 = 5")#
	recDat <- recode( recDat, " 9 = 6")#
	recDat <- recode( recDat, " 10 = 7")#
	recDat <- recode( recDat, " 11 = 8")#
	recDat <- recode( recDat, " 12 = 9")#
	return( recDat )#
	}#
cats <- c(1:12)#
acc <- c( 1, 2, 3, 6, 17, 35, 75, 160, 310, 640, 1300, 2690 )#
ab <- c( 50, 100, 150, 300, 850, 1750, 3750, 8000, 15500, 32000, 65000, 134500)#
#
mn <- c( 1, 2, 3, 4, 12, 26, 51, 126, 251, 501, 1001, 2001)#
mx <- c( 1, 2, 3, 11, 25, 50, 125, 250, 500, 1000, 2000, 4000)#
#
rmn1 <- c( 1, 4, 12, 26, 51, 126, 251, 501, 1001, 2001 )#
rmx1 <- c(  3, 11, 25, 50, 125, 250, 500, 1000, 2000, 4000 )#
bks1 <- c( 1, 4, 12, 26, 51, 126, 251, 501, 1001, 2001 , 4000 )#
dat1 <- read.csv( "states.csv")#
dat2 <- read.csv( "raw.csv")#
#
layout( matrix( c(1,2), ncol  =1) )#
hist( dat1$state, freq = FALSE)#
hist( dat2$y, freq = FALSE)
rdat1 <- recodeDat2( dat1$state )#
rdat2 <- recodeDat2( dat2$y )#
#
layout( matrix( c(1,2), ncol  =1) )#
hist( rdat1, freq = FALSE, breaks = seq(1:12))#
hist( rdat2, freq = FALSE, breaks = seq(1:12))
rmn1 <- c( 1, 4, 12, 26, 51, 126, 251, 501, 1001, 2001 )#
rmx1 <- c(  3, 11, 25, 50, 125, 250, 500, 1000, 2000, 4000 )#
bks1 <- c( 1, 4, 12, 26, 51, 126, 251, 501, 1001, 2001 , 4000 )#
bks2 <- c( 1, 12, 26, 51, 126, 251, 501, 1001, 2001 , 4000 )#
#
hdat1 <- table( factor( rdat1, levels = c(1:10) ))#
hdat2 <- table( factor( rdat2, levels = c(1:9) ))#
#
op1 <- optGammaFun( hdat1, log(bks1) )
op2 <- optGammaFun( hdat2, log(bks2) )
